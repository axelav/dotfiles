# bash_prompt inspired by:
# - https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt
# - https://github.com/gf3/dotfiles

# ?
# SOLAR_YELLOW=$(tput setaf 136)
# SOLAR_ORANGE=$(tput setaf 166)
# SOLAR_RED=$(tput setaf 124)
# SOLAR_MAGENTA=$(tput setaf 125)
# SOLAR_VIOLET=$(tput setaf 61)
# SOLAR_BLUE=$(tput setaf 33)
# SOLAR_CYAN=$(tput setaf 37)
# SOLAR_GREEN=$(tput setaf 64)
# SOLAR_WHITE=$(tput setaf 254)

BOLD=$(tput bold)
RESET=$(tput sgr0)
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)

style_user="\[${RESET}${MAGENTA}\]"
style_host="\[${RESET}${CYAN}\]"
style_path="\[${RESET}${BLUE}\]"
style_chars="\[${RESET}${BLACK}\]"
style_branch="${YELLOW}"

if [[ "$SSH_TTY" ]]; then
  # connected via ssh
  style_host="\[${BOLD}${RED}\]"
elif [[ "$USER" == "root" ]]; then
  # logged in as root
  style_user="\[${BOLD}${RED}\]"
fi

is_git_repo() {
  $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
  $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

get_git_branch() {
  local branch_name

  # Get the short symbolic ref
  branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
  # If HEAD isn't a symbolic ref, get the short SHA
  branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
  # Otherwise, just give up
  branch_name="(unknown)"

  printf $branch_name
}

# Git status information
prompt_git() {
  local git_info git_state uc us ut st

  if ! is_git_repo || is_git_dir; then
    return 1
  fi

  git_info=$(get_git_branch)

  # Check for uncommitted changes in the index
  if ! $(git diff --quiet --ignore-submodules --cached); then
    uc="${GREEN}+"
  fi

  # Check for unstaged changes
  if ! $(git diff-files --quiet --ignore-submodules --); then
    us="${RED}!"
  fi

  # Check for untracked files
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    ut="${YELLOW}?"
  fi

  # Check for stashed files
  if $(git rev-parse --verify refs/stash &>/dev/null); then
    st="${BLUE}$"
  fi

  git_state=$uc$us$ut$st

  # Combine the branch name and state information
  if [[ $git_state ]]; then
    git_info="$git_info${CYAN}[$git_state${CYAN}]"
  fi

  # You know you’re on `gh-pages`, right? *Right*?
  if [[ $git_info == "gh-pages" ]]; then
    style_branch="${BLUE}"
  fi

  # Don’t screw up `stable`.
  if [[ $git_info == *stable* ]]; then
    style_branch="${RED}"
  fi

  printf "${BLACK}on ${style_branch}${git_info}"
}

# Build the prompt
PS1="\n" # Newline
PS1+="${style_host}\h"               # Host
PS1+="${style_chars}:"               # :
PS1+="${style_path}\w"               # Working directory
PS1+=" ${style_chars}∴ ☮ ∴ "
PS1+="${style_user}~\u~ "            # Username
PS1+="\$(prompt_git)"                # Git details
PS1+="\n"                            # Newline
PS1+="${style_chars}\$ \[${RESET}\]" # (and reset color)
