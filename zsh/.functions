#!/usr/bin/env zsh

# create a new directory and enter it
function mkd {
  mkdir -p "$@" && cd "$@"
}

# cd into whatever is the forefront finder window.
function cdf {
    cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# use git's colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff {
    git diff --no-index --color-words "$@"
  }
fi

# extract archives - use: extract <file>
# credits to http://dotfiles.org/~pseup/.bashrc
function extract {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) rar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function todo {
  cd ~/.todo || return 1&& l=$(ls -1t|head -n1)&&t=$(date +%Y%m%d);
  [[ "$1" == "last" ]]&&cp $l $t;
  ${EDITOR:-vi} $t;
  cd -;
}

# convert a list of wav files to v0 mp3
function V0 {
  for filename; do
    lame -V0 "$filename" "${filename%.*}.mp3"
  done
}

# gitignore as a service: https://github.com/joeblau/gitignore.io
function gi {
  curl -L -s https://www.gitignore.io/api/$@;
}

function backup {
  rsync -avz --delete --progress --exclude-from "$HOME/.rsync_excludes" $HOME /Volumes/BigBoi;
  date >> /Volumes/BigBoi/BACKUP.log;
}

# open up a package's readme in an electron viewer
# usage: readme [package]
# note: must `npm i -g vmd` first
function readme {
  npm view $@ readme | vmd;
}

# https://twitter.com/climagic/status/672862397015658496
shrug () {
  echo -n "¯\_(ツ)_/¯" | pbcopy;
  echo "¯\_(ツ)_/¯ copied to your clipboard";
}

note () {
  if [ -d $NOTES_DIR ]; then
    nvim $NOTES_DIR/README.md
  else
    nvim $HOME/README.md
  fi
}

today () {
  if [ -d $NOTES_DIR ]; then
    YEAR_DIR=$NOTES_DIR/$(date +%Y)
  else
    YEAR_DIR=$HOME/$(date +%Y)
  fi
  CURRENT_DATE=$(date -I)
  YESTERDAY=$(date -d "yesterday 13:00" '+%Y-%m-%d')
  FILE=$YEAR_DIR/$CURRENT_DATE.md
  PREVIOUS_NOTE=$YEAR_DIR/$YESTERDAY.md
  if [ ! -d "$YEAR_DIR" ]; then
    mkdir $YEAR_DIR
  fi

  if [ ! -f "$YEAR_DIR/$CURRENT_DATE.md" ]; then
    # date -Idate > $FILE
    echo "# $(date -Idate)\n\n## listened\n\n## exercise" > $FILE
    if [ -f $PREVIOUS_NOTE ]; then
      cat $PREVIOUS_NOTE >> $FILE
    fi
    nvim $FILE
  else
    nvim $FILE
  fi
}

c () {
  if hash hicat 2>/dev/null; then
    hicat $@;
  else
    cat $@;
  fi
}

v () {
  if hash nvim 2>/dev/null; then
    if [ $1 ]; then
      nvim $@;
    elif [ -f Session.vim ]; then
      nvim -S;
    else
      nvim;
    fi
  else
    vim $@;
  fi
}

function trash {
  mv $@ ~/.Trash
}

weather () {
  curl http://wttr\.in/$@ | sed -e "s:226m:202m:g" # for light theme
}

# https://gist.github.com/hlissner/db74d23fc00bed81ff62
# usage: replaceall [search] [replace]
# caveats: will choke if either arguments contain a forward slash
# notes: will back up changed files to *.bak files
function replace-all {
  rg -0 -l $1 | xargs -0 perl -pi.bak -e "s/$1/$2/g"
}

function light {
  base16_atelier-savanna-light
}

function dark {
  base16_atelier-savanna
}
